#+TITLE: My Primary Emacs Config in Org
[[./img/Noise_Marine_Transparent.png]]
#+STARTUP: content inlineimages
* Environment
** Auto-Update
#+BEGIN_SRC emacs-lisp
  ;; Auto update
  (use-package auto-package-update
    :ensure t
    :config
    (setq auto-package-update-interval 5)
    (setq auto-package-update-delete-old-verions t)
    (auto-package-update-maybe))
#+END_SRC
** Edit/Reload configuration
#+BEGIN_SRC emacs-lisp
  ;; Edit ini2.org
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/ini2.org" ))
  (global-set-key (kbd "C-c e") 'config-visit)
  ;; Reload ~/.emacs.d/ini2.org at runtime
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/ini2.org" )))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** Terminal
#+BEGIN_SRC emacs-lisp
  ;; Set the shell as bash 
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
  ;;; bind SUPER (windows key) and enter (RETURN) to launch ansi-term
  (global-set-key (kbd "<s-return>") 'ansi-term) 
#+END_SRC
** Minor
#+BEGIN_SRC emacs-lisp
  ;; no toolbar:
  (tool-bar-mode -1)
  ;; no menubar:
  ;;(menu-bar-mode -1)
  ;; no scrollbar:
  (scroll-bar-mode -1)
  ;; line numbers:
  (global-display-line-numbers-mode 1)
  ;; scrolling:
  (setq scroll-conservatively 100)
  ;; no "bell" (audible notification):
  (setq ring-bell-function 'ignore)
  ;; highlight:
  (when window-system (global-hl-line-mode t))
  ;; prettify (lambda to icon):
  (when window-system (global-prettify-symbols-mode t))
  ;; use mouse in xterm  
  (xterm-mouse-mode)
  ;; auto reloading (reverting) buffers
  (global-auto-revert-mode 1)
  ;; disable lock files:
  (setq create-lockfiles nil)
  ;; disable autosave:
  (setq auto-save-default nil)
  ;; disable backups:
  (setq make-backup-files nil)
  ;; backups directory:
  ;;(setq backup-directory-alist '(("" . "~/.emacs.d/backup")))
  ;; Pass "y or n" instead of "yes or no"
  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; Disable clipboard
  (setq x-select-enable-clipboard-manager nil)
#+END_SRC
** Zoom with Scroll
#+BEGIN_SRC emacs-lisp
  ;; Binding - Control & Scroll Up - Increase 
  (global-set-key [C-mouse-4] 'text-scale-increase)
  ;; Binding - Control & Scroll Down - Decrease
  (global-set-key [C-mouse-5] 'text-scale-decrease)
#+END_SRC
** Recent Files
#+BEGIN_SRC emacs-lisp
  ;; Enable recent file mode
  (recentf-mode 1)
  ;; list length
  (setq recentf-max-menu-items 20)
  ;; binding
  (global-set-key (kbd "C-c f") 'recentf-open-files)
#+END_SRC
** Keybinding Help
#+BEGIN_SRC emacs-lisp
  ;; Key binding hints
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
* Buffers & Windows
** Ibuffer
#+BEGIN_SRC emacs-lisp
  ;; Better switching
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
** Expert mode
#+BEGIN_SRC emacs-lisp
  ;; Kill buffers (while in menu for switching buffers; pass d on a buffer, x confirmes) 
  ;; without confirmation (y or n)
  (setq ibuffer-expert t)
#+END_SRC
** IDO mode
#+BEGIN_SRC emacs-lisp
  ;; Buffer stuff
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** IDO-vertical
#+BEGIN_SRC emacs-lisp
  ;; Better positioning
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** IDO - switch buffers
#+BEGIN_SRC emacs-lisp
  ;; Better buffer switching
  (global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+END_SRC
** Smex config
#+BEGIN_SRC emacs-lisp
  ;; Run known programs faster
  (use-package smex
    :ensure t
    :init
    (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** Switch-window
#+BEGIN_SRC emacs-lisp
  ;; Faster window switching
  ;;; when you press C-x o you choose a window
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '( "a" "s" "d" "f" "g" "h" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
** Following window splits
#+BEGIN_SRC emacs-lisp
  ;; Better window splitting
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
  ;;;
  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
* Look
** Window Size
#+BEGIN_SRC emacs-lisp
  ;;; Should work well with 88 x 36
  (when window-system
    (set-frame-size (selected-frame) 88 36))
#+END_SRC
** Transparency
#+BEGIN_SRC emacs-lisp
  ;; Set transparency
  (set-frame-parameter (selected-frame) 'alpha '(95 . 80))
  (add-to-list 'default-frame-alist '(alpha . (95 . 80)))
  ;;; You can use the following snippet after you’ve set the alpha as above to assign a toggle to “C-c t”
  (defun toggle-transparency ()
    (interactive)
    (let ((alpha (frame-parameter nil 'alpha)))
       (set-frame-parameter
       nil 'alpha
       (if (eql (cond ((numberp alpha) alpha)
		       ((numberp (cdr alpha)) (cdr alpha))
		       ;;; Also handle undocumented (<active> <inactive>) form.
		       ((numberp (cadr alpha)) (cadr alpha)))
		100)
	   '(95 . 80) '(100 . 100)))))
  (global-set-key (kbd "C-c t") 'toggle-transparency)
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
  ;; Font settings
  (set-face-attribute 'default nil
		      :font "Monospace"
		      :weight 'normal
		      :width 'normal
		      :height 110
		      )
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
  ;; Install spacemacs-theme if not installed
  (unless (package-installed-p 'spacemacs-theme)
    (package-refresh-contents)
    (package-install 'spacemacs-theme))
  (load-theme 'spacemacs-dark t)
#+END_SRC
** Spaceline
#+BEGIN_SRC emacs-lisp
  ;; Mode line
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC
** Diminish
#+BEGIN_SRC emacs-lisp
  ;; Get rid of unused modes
  (use-package diminish
    :ensure t
    :init
    (diminish 'beacon-mode)
    (diminish 'which-key-mode)
    (diminish 'rainbow-mode)
    (diminish 'eldoc-mode)
    (diminish 'auto-complete-mode)
    (diminish 'flycheck-mode)
    (diminish 'abbrev-mode)
    )
#+END_SRC
* File Editing
** Insert Date
#+BEGIN_SRC emacs-lisp
  ;; Insert date in non-Org documents
  (defun insert-date (prefix)
      (interactive "P")
      (let ((format (cond
		     ((not prefix) "%d.%m.%Y")
		     ((equal prefix '(4)) "%Y-%m-%d")
		     ((equal prefix '(16)) "%A, %d. %B %Y")))
	    (system-time-locale "pl_PL"))
	(insert (format-time-string format))))
  ;;; binding
  (global-set-key (kbd "C-c d") 'insert-date)
  ;;; Howto:
  ;;;; ‘C-c d’: 13.04.2004
  ;;;; ‘C-u C-c d’: 2004-04-13
  ;;;; ‘C-u C-u C-c d’: Dienstag, 13. April 2004
#+END_SRC
** Encoding
#+BEGIN_SRC emacs-lisp
  ;; Set encoding to UTF-8
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  ;; Auto check
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
  ;; Code snippets
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
#+END_SRC
** Rainbow color
#+BEGIN_SRC emacs-lisp
  ;; Colorize
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC
** Rainbow delimeters
#+BEGIN_SRC emacs-lisp
  ;; Colored delimeters
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
** Avy
#+BEGIN_SRC emacs-lisp
  ;; Easier search inside files
  ;;; after pressung binded keys, pass a letter,
  ;;; then pass symbols for the highlighted letter to which you want to go to
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
** Beacon mode
#+BEGIN_SRC emacs-lisp
  ;; Line highlight when switching
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
  ;; Project management
  (use-package projectile
    :ensure t
    :init
    (projectile-mode 1))
  ;;; binding
  (global-set-key (kbd "<f5>") 'projectile-compile-project)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  ;; Git management
  (use-package magit
  :ensure t
  :config
  (setq magit-push-always-verify nil)
  (setq git-commit-summary-max-length 50)
  :bind
  ("M-g" . magit-status))
#+END_SRC
** Sudo Edit
#+BEGIN_SRC emacs-lisp
  ;; Edit files as root
  ;;; this changes active user to root
  (use-package sudo-edit
    :ensure t
    :bind
    ("s-e" . sudo-edit))
#+END_SRC
** Dired-Sidebar
#+BEGIN_SRC emacs-lisp
  ;; Sidebar for Emacs leveraging Dired 
  (use-package dired-sidebar
    :ensure t
    :commands (dired-sidebar-toggle-sidebar)
    :bind (("C-x C-n" . dired-sidebar-toggle-sidebar)))
#+END_SRC
* Completion
** Electric - bracket autocompletion.
#+BEGIN_SRC emacs-lisp
  ;; Auto close brackets
  (setq electric-pair-pairs '(
			      (?\{ . ?\})
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\" . ?\")
			      ))
  (electric-pair-mode t)
#+END_SRC
** HTML Completion
#+BEGIN_SRC emacs-lisp
  ;; Enable Web Mode
  (use-package web-mode
    :ensure t
    :mode
    (
     ("\\.phtml\\'" . web-mode)
     ("\\.tpl\\.php\\'" . web-mode)
     ("\\.blade\\.php\\'" . web-mode)
     ("\\.jsp\\'" . web-mode)
     ("\\.as[cp]x\\'" . web-mode)
     ("\\.erb\\'" . web-mode)
     ("\\.html?\\'" . web-mode)
     ("\\.ejs\\'" . web-mode)
     ("\\.php\\'" . web-mode)
     ("\\.mustache\\'" . web-mode)
     ("/\\(views\\|html\\|theme\\|templates\\)/.*\\.php\\'" . web-mode)
     )
    :init
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-attr-indent-offset 2)
    (setq web-mode-attr-value-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-enable-auto-closing t)
    (setq web-mode-enable-auto-pairing t)
    (setq web-mode-enable-comment-keywords t)
    (setq web-mode-enable-current-element-highlight t)
    )
#+END_SRC
** Auto-Complete
#+BEGIN_SRC emacs-lisp
  ;; Auto complete
  (use-package auto-complete
      :ensure t
      :config
      (ac-config-default))
#+END_SRC
* Org
** Org Bullets
#+BEGIN_SRC emacs-lisp
  ;; Make org look prettier
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** Same edit window
#+BEGIN_SRC emacs-lisp
  ;; With C-c ' replace the .org file with editor
  (setq org-src-window-setup 'current-window)
#+END_SRC
** Wrap words
#+BEGIN_SRC emacs-lisp
  ;; Wrapping
  (setq org-startup-truncated nil)
#+END_SRC
** Org Agenda
#+BEGIN_SRC emacs-lisp
  ;; My Org agenda
  (global-set-key "\C-ca" 'org-agenda)
  (setq org-agenda-files (list
			  "~/Documents/todo.org"
			  ))
#+END_SRC
* Startup Customization
** Startup screen settings
#+BEGIN_SRC emacs-lisp
  ;; Startup
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-message t)
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
  ;; Dashboard
  (use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  ;;; for Emacs as deamon:
  ;;(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
  (setq dashboard-banner-logo-title "This lack of Emacs offends Stallman!")
  (setq dashboard-banner-logo-title-face t)
  (setq dashboard-startup-banner "~/.emacs.d/img/Noise_Marine_Transparent.png")
  ;;(setq dashboard-startup-banner 'official)
  (setq dashboard-items '((recents  . 7)
			  (projects . 5)
			  ))
  (add-to-list 'dashboard-items '(agenda) t)
  (setq show-week-agenda-p t)
  )
#+END_SRC
